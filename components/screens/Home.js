import React, {Component} from 'react';
import {
	Text,
	View,
	ListView,
	TextInput,
} from 'react-native';
import Swipeout from 'react-native-swipeout';
const Instructions = require('../../components/Instructions');
const Project = require('../../components/Project');
const ActionButton = require('../../components/ActionButton');
import { createStackNavigator } from 'react-navigation';
const styles = require('../../styles.js');

var newProjectName = ''; // Name entered by user for new project to add
var selectedProjectKey; // Key generated by Firebase corresponding to project currently under consideration
var selectedProjectTitle; // Title input by user corresponding to project currently under consideration

export default class Screen1 extends Component {
	static navigationOptions = {
    	title: 'Screen1',
		header: { visible:false }
  	};

  	constructor(props) {
		super(props);
	    this.state = {
	    	// Create DataSource object that gives us methods to interact with list items.
      		// Initialize it with rowHasChanged() that designates a row to have changed if it's not equal to previous contents of row.
	    	dataSource: new ListView.DataSource({
	        	rowHasChanged: (row1, row2) => row1 !== row2,
	    	}),
	    	floorSelected: false, // Boolean indicating whether or not a project has been selected (user will be prevented from navigating to next screen if one is not
	    };
    	selectedProjectKey = this.props.selectedProjectKey; // Initialize selectedProjectKey with whatever was last selected
    	selectedProjectTitle = this.props.selectedProjectTitle; // Initialize selectedProjectTitle with whatever was last selected
	}

	// COMPONENT LIFECYCLE METHODS

	componentDidMount() {
    	this.listenForItems(this.props.itemsRef); // Initialize event listener for database
    }

    // DATA SAVING METHODS

    // Record which project is currently selected
    saveProjectKey = (keyOfSelectedProject) => {
		selectedProjectKey = keyOfSelectedProject
    	this.props.saveSelectedProjectKey(keyOfSelectedProject);
    }

    saveProjectTitle = (titleOfSelectedProject) => {
		selectedProjectTitle = titleOfSelectedProject,
		this.props.saveSelectedProjectTitle(titleOfSelectedProject);
	}

	// Save name of new project entered by user as it is typed
	saveNewProjectName = (newProjectNameReceived) => {
		newProjectName = newProjectNameReceived;
	}

	// Create new project with objects containing a default board and end
	// New project is saved to Firebase
	// The default board and end are created so that if there is only one board/end and it is deleted, the project isn't deleted.
	createProject = () => {
		this.props.itemsRef.push({
			[newProjectName]: {
				'boards': {
					'default': 'default'
				},
				'ends': {
					'default': 'default'
				}
			}
		});
	}

	// EVENT LISTENERS

    // Update state whenever a project is added or removed from DB
 	listenForItems(itemsRef) {
 		// Call callback function on snapshot of data
	    itemsRef.on('value', (snap) => {
	      	var items = []; // Empty array in which we'll load all projects from DB
	      	snap.forEach((child) => { // For each project
		        // Push project object in the form that cloneWithRows() needs
		        items.push({
		          title: Object.keys(child.val())[0], // Project title that user input
		          _key: child.key // Project key that Firebase generated
		        });
	      	});
	      	// Update component state
		    this.setState({
		        dataSource: this.state.dataSource.cloneWithRows(items) // Put 'text' items into dataSource
		    });
	    });
	}

	// RENDERING METHODS

	// Function dictating how to render items in list of projects
	renderProject(project) {
		// When floor is clicked, save its key and title as 'current' floor
		const selectProject = () => {
			this.setState({
				floorSelected: true
			});
			this.saveProjectKey(project._key);
			this.saveProjectTitle(project.title);
		};
		return (
	    	<Project item={project} onPress={selectProject}/>
	    );
	}

	render() {
		return (
			<View style={styles.container}>
				<View style={styles.navContainer}>
					{this.state.floorSelected && <Text style={styles.navBack} onPress = { () => this.props.navigate('Screen2') }></Text>}
					{this.state.floorSelected && <Text style={styles.navForward} onPress = { () => this.props.navigate('Screen2') }>Select floor</Text>}
		        </View>
	    		<Instructions title="Please select existing floor plan, or enter name of new plan and click 'Add' to create new"/>
	    		<ListView dataSource={this.state.dataSource} renderRow={this.renderProject.bind(this)} style={styles.listview} enableEmptySections/>
	    		<ActionButton title="Add" onPress={this.createProject} />
	    		<TextInput placeholder="Please enter the name of new floor project" style={styles.textInput} onChangeText={this.saveNewProjectName}/>
	    	</View>
	    );
	}
}