import React, {Component} from 'react';
import {
	Text,
	View,
	Dimensions,
	ListView,
	TextInput,
} from 'react-native';
import Swipeout from 'react-native-swipeout';
const Instructions = require('../../components/Instructions');
const Floor = require('../../components/Floor').default;
const FloorSection = require('../../components/FloorSection');
const AddSectionButton = require('../../components/AddSectionButton');
import { createStackNavigator } from 'react-navigation';
const styles = require('../../styles.js');

var isMounted = false; // Boolean variable indicating whether or not component has mounted yet
var sectionNumRows; // Number of rows in section currently under consideration
var sectionWidth; // Width of section currently under consideration
var floorSections; // Array containing View component of each section of floor
var floorSectionsTemp = []; // Temporary version of floorSections in which we'll gather Views of floor sections during every render, before copying to floorSections.
var selectedProjectKey; // Key generated by Firebase corresponding to project currently under consideration
var selectedProjectTitle; // Title input by user corresponding to project currently under consideration
var floorRowsArray; // Array containing lengths of each row in floor

export default class Screen2 extends Component {
	static navigationOptions = {
		header: null,
  	};

  	constructor(props) {
		super(props);
	    this.state = {
	    	dataSource: new ListView.DataSource({
	        	rowHasChanged: (row1, row2) => row1 !== row2,
	    	}),
	    };
    	sectionNumRows = 0, // Number of rows in current section of floor
    	sectionWidth = 0, // Width of current section of floor
    	floorSections = [], // Array to hold sections of floor
	    selectedProjectKey = this.props.selectedProjectKey;
		selectedProjectTitle = this.props.selectedProjectTitle;
		floorRowsArray = this.props.floorRowsArray;
	}

	// COMPONENT LIFECYCLE METHODS

	componentWillMount() {
    	isMounted = true;
	}

    componentWillUnmount() {
    	isMounted = false;
    }

	componentDidMount() {
 		// Initialize event listener for database
    	this.listenForItems(this.props.itemsRef);
    }

    // DATA SAVING METHODS

    // Save Key generated by Firebase corresponding to selected project
	saveSelectedProjectKey = (projectKeyReceived) => {
		this.props.saveSelectedProjectKey(projectKeyReceived);		
		selectedProjectKey = projectKeyReceived;
	}

    // Save title input by user corresponding to selected project
	saveSelectedProjectTitle = (projectTitleReceived) => {
		this.props.saveSelectedProjectTitle(projectTitleReceived);		
		selectedProjectTitle = projectTitleReceived;
	}

	// Save number of rows in current section input by user
	saveSectionNumRows = (sectionNumRowsReceived) => {
		sectionNumRows = sectionNumRowsReceived;
	}

	// Save width of current section input by user
	saveSectionWidth = (sectionWidthReceived) => {
		sectionWidth = sectionWidthReceived;
	}

	// Save set of View components for each section of floor
	saveFloorSections = (floorSectionsReceived) => {
		this.props.saveFloorSections(floorSectionsReceived);
	}

	// Save array containing lengths of each row in floor
	setFloorRowsArray = (floorRowsArrayReceived) => {
		this.props.setFloorRowsArray(floorRowsArrayReceived);
	}

    // Save number of rows in current section of floor
	saveSectionNumRows = (numRows) => {
		sectionNumRows = numRows;
	}

	// Save width of current section of floor
	saveSectionWidth = (width) => {
		sectionWidth = width;
	}

	// Save data about section currently under consideration to Firebase
	saveSectionData = () => {
		this.props.itemsRef.child(selectedProjectKey).child(selectedProjectTitle).child('floorSections').push({
			numRows: sectionNumRows,
			width: sectionWidth
		});
	}

	// EVENT LISTENERS

    // Update state whenever a floor section is added or removed from DB
    listenForItems(itemsRef) {
 		// Call callback function on snapshot of data
	    itemsRef.on('value', (snap) => {
		    // If component has unmounted, stop listening
	    	if (!isMounted)
		    	return;
	      	var items = []; // empty array in which we'll load all floor sections
	      	// Save each floor section from Firebase into 'items' array
  			snap.child(selectedProjectKey).child(selectedProjectTitle).child('floorSections').forEach((section) => {
  				items.push({
  					title: [section.val().numRows, section.val().width],
			        _key: section.key
  				});
  			});
  			// Update component state
		    this.setState({
		        dataSource: this.state.dataSource.cloneWithRows(items)
		    });
	    });
	}


	// Function dictating how to render items in list of floor sections
	renderItem(item) {
		const swipeSettings = {
			autoClose: true,
			onClose: (secId, rowId, direction) => {
				this.props.itemsRef.child(selectedProjectKey).child(selectedProjectTitle).child('floorSections').child(item._key).remove();
			}
		}

		var swipeBtns = [{
			text: 'Delete',
			backgroundColor: 'red',
			underlayColor: 'rgba(0, 0, 0, 1, 0.6)',
		}];

		return (
			<Swipeout {...swipeSettings} right={swipeBtns}>
		    	<FloorSection item={item} />
	    	</Swipeout>
	    );
	}

	render() {
	    this.props.itemsRef.on('value', (snap) => {
	    	console.log("it is : ", floorSectionsTemp);
	    	// If comopnent is unmounted, stop listening
	    	if (!isMounted)
		    	return;
		    // Clear floorRowsArrayTemp and floorSectionsTemp, and initialize max and rowCount to 0
	      	var floorRowsArrayTemp = [];
	      	floorSectionsTemp = [];
	      	var max = 0;
	      	var rowCount = 0;
	      	// Compute width of widest section so that we can scale the sizes of the others.
  			snap.child(selectedProjectKey).child(selectedProjectTitle).child('floorSections').forEach((section) => {
				if (parseFloat(section.val().width) > max)
					max = section.val().width;
				rowCount += parseFloat(section.val().numRows);
  			});
  			// Construct object containing Views for each section
  			snap.child(selectedProjectKey).child(selectedProjectTitle).child('floorSections').forEach((section) => { // push index so there's unique key
  				for (var i = 0; i < section.val().numRows; i++) { // For each row in section
  					floorRowsArrayTemp.push(section.val().width); // Push given row to floorRowsArrayTemp
  				}
  				// Push View corresponding to the given section into floorSectionsTemp
				floorSectionsTemp.push(<View key={section.key} style={{width: (section.val().width/max)*350, height: (section.val().numRows/rowCount)*200, backgroundColor: 'steelblue', borderColor: 'black', borderWidth: 1}} />);
  			});
  			// Save floorRowsArrayTemp and floorSectionsTemp to floorRowsArray amd rows, respectively
  			this.setFloorRowsArray(floorRowsArrayTemp.slice());
  			this.saveFloorSections(floorSectionsTemp.slice());
	    });

	    return (
	      	<View style={styles.container}>
	      		<View style={styles.navContainer}>
	      		<Text
		        	style={styles.navBack}
		          	onPress = { () => this.props.navigate('Screen1') }>Home
		        </Text>
		        <Text
		        	style={styles.navForward}
		          	onPress = { () => this.props.navigate('Screen3') }>Select Boards
		        </Text>
		        </View>

	    		<Instructions title="Please add floor sections by specifying the width and number of rows in the section, and clicking 'Add'"/>
		        <Floor rowCollection={floorSectionsTemp}></Floor>
				<ListView dataSource={this.state.dataSource} renderRow={this.renderItem.bind(this)} style={styles.listview} enableEmptySections/>
				<AddSectionButton title="Add Floor Section" onPress={this.saveSectionData} />
				<View style={{flexDirection: 'row'}}>
					<TextInput
						placeholder="Please enter number of rows"
						style={{height: 40, borderColor: 'gray', borderWidth: 1, width: Dimensions.get('window').width/2}}
						onChangeText={this.saveSectionNumRows}/>
					<TextInput
						placeholder="Please enter width of rows"
						style={{height: 40, borderColor: 'gray', borderWidth: 1, width: Dimensions.get('window').width/2}}
						onChangeText={this.saveSectionWidth}/>
				</View>
	      	</View>
	    );
  	}
	
}
